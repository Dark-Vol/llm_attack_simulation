#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ LLM Attack Simulation
"""

import sys
import subprocess
import argparse
import os

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=False)
        print(f"\n‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {e.returncode})")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ LLM Attack Simulation",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_tests.py                    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  python run_tests.py --unit            # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
  python run_tests.py --coverage        # –° –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
  python run_tests.py --lint            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
  python run_tests.py --all             # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
    )
    
    parser.add_argument(
        '--unit', 
        action='store_true', 
        help='–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç–æ–≤'
    )
    
    parser.add_argument(
        '--integration', 
        action='store_true', 
        help='–ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç–æ–≤'
    )
    
    parser.add_argument(
        '--coverage', 
        action='store_true', 
        help='–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞'
    )
    
    parser.add_argument(
        '--lint', 
        action='store_true', 
        help='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ —Å flake8'
    )
    
    parser.add_argument(
        '--format', 
        action='store_true', 
        help='–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å black'
    )
    
    parser.add_argument(
        '--type-check', 
        action='store_true', 
        help='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å mypy'
    )
    
    parser.add_argument(
        '--all', 
        action='store_true', 
        help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏'
    )
    
    parser.add_argument(
        '--verbose', '-v', 
        action='store_true', 
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    if not any([args.unit, args.integration, args.coverage, args.lint, args.format, args.type_check, args.all]):
        args.all = True
    
    success = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        import pytest
        import yaml
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if args.format or args.all:
        success &= run_command(
            "black --check --diff .",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ (black)"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
    if args.lint or args.all:
        success &= run_command(
            "flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (flake8)"
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    if args.type_check or args.all:
        success &= run_command(
            "mypy . --ignore-missing-imports",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (mypy)"
        )
    
    # Unit —Ç–µ—Å—Ç—ã
    if args.unit or args.all:
        if args.coverage:
            success &= run_command(
                "pytest tests/ -m unit --cov=attack --cov=defense --cov=simulation --cov=utils --cov-report=term-missing",
                "Unit —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
            )
        else:
            success &= run_command(
                "pytest tests/ -m unit -v",
                "Unit —Ç–µ—Å—Ç—ã"
            )
    
    # Integration —Ç–µ—Å—Ç—ã
    if args.integration or args.all:
        if args.coverage:
            success &= run_command(
                "pytest tests/ -m integration --cov=attack --cov=defense --cov=simulation --cov=utils --cov-report=term-missing",
                "Integration —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
            )
        else:
            success &= run_command(
                "pytest tests/ -m integration -v",
                "Integration —Ç–µ—Å—Ç—ã"
            )
    
    # –í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    if args.coverage and not (args.unit or args.integration):
        success &= run_command(
            "pytest tests/ --cov=attack --cov=defense --cov=simulation --cov=utils --cov-report=term-missing --cov-report=html:htmlcov",
            "–í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"
        )
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n{'='*60}")
    if success:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –û—Ç—á–µ—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–∞–ø–∫–µ htmlcov/")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    print(f"{'='*60}")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
