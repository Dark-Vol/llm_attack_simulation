#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ LLM Attack Analysis System
"""

import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description=""):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    print(f"\nüöÄ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print("-" * 50)
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=300  # 5 —Ö–≤–∏–ª–∏–Ω —Ç–∞–π–º–∞—É—Ç
        )
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            if result.stdout:
                print("–í–∏–≤—ñ–¥:")
                print(result.stdout)
        else:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é")
            if result.stderr:
                print("–ü–æ–º–∏–ª–∫–∏:")
                print(result.stderr)
            if result.stdout:
                print("–í–∏–≤—ñ–¥:")
                print(result.stdout)
        
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚è∞ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {e}")
        return False

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")
    
    required_packages = ['pytest', 'pytest-cov']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—é...")
        
        install_command = f"pip install {' '.join(missing_packages)}"
        if not run_command(install_command, "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"):
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
            return False
    
    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    return True

def run_import_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ —ñ–º–ø–æ—Ä—Ç—ñ–≤"""
    return run_command(
        "python test_imports.py",
        "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –º–æ–¥—É–ª—ñ–≤"
    )

def run_unit_tests():
    """–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç—ñ–≤"""
    return run_command(
        "python -m pytest tests/ -v",
        "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç—ñ–≤"
    )

def run_coverage_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º"""
    return run_command(
        "python -m pytest tests/ --cov=. --cov-report=html --cov-report=term",
        "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º –∫–æ–¥—É"
    )

def run_specific_test(test_file):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç—É"""
    return run_command(
        f"python -m pytest {test_file} -v",
        f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É {test_file}"
    )

def run_web_app_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É"""
    return run_command(
        "python -m pytest tests/test_web_app.py -v",
        "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É"
    )

def run_security_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –±–µ–∑–ø–µ–∫–∏"""
    return run_command(
        "python -m pytest tests/test_security.py -v",
        "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏"
    )

def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤"""
    return run_command(
        "python -m pytest tests/test_integration.py -v",
        "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
    )

def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ø—Ä–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ø—Ä–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤
    reports_dir = Path("test_reports")
    reports_dir.mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é –∑–≤—ñ—Ç—É
    report_command = (
        "python -m pytest tests/ "
        "--cov=. "
        "--cov-report=html:test_reports/html "
        "--cov-report=xml:test_reports/coverage.xml "
        "--cov-report=term-missing "
        "--junitxml=test_reports/junit.xml "
        "-v"
    )
    
    success = run_command(report_command, "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É")
    
    if success:
        print(f"\nüìÅ –ó–≤—ñ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ: {reports_dir.absolute()}")
        print("   - HTML –∑–≤—ñ—Ç: test_reports/html/index.html")
        print("   - XML –∑–≤—ñ—Ç: test_reports/coverage.xml")
        print("   - JUnit –∑–≤—ñ—Ç: test_reports/junit.xml")
    
    return success

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ LLM Attack Analysis System")
    print("=" * 60)
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "imports":
            run_import_tests()
            return
        elif command == "unit":
            run_unit_tests()
            return
        elif command == "coverage":
            run_coverage_tests()
            return
        elif command == "web":
            run_web_app_tests()
            return
        elif command == "security":
            run_security_tests()
            return
        elif command == "integration":
            run_integration_tests()
            return
        elif command == "report":
            generate_test_report()
            return
        elif command == "specific" and len(sys.argv) > 2:
            test_file = sys.argv[2]
            run_specific_test(test_file)
            return
        else:
            print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏")
            show_help()
            return
    
    # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
    print("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É —Ç–µ—Å—Ç—ñ–≤...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if not check_dependencies():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        sys.exit(1)
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
    import_success = run_import_tests()
    
    # Unit —Ç–µ—Å—Ç–∏
    unit_success = run_unit_tests()
    
    # –¢–µ—Å—Ç–∏ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º
    coverage_success = run_coverage_tests()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
    report_success = generate_test_report()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   –Ü–º–ø–æ—Ä—Ç–∏: {'‚úÖ' if import_success else '‚ùå'}")
    print(f"   Unit —Ç–µ—Å—Ç–∏: {'‚úÖ' if unit_success else '‚ùå'}")
    print(f"   –ü–æ–∫—Ä–∏—Ç—Ç—è: {'‚úÖ' if coverage_success else '‚ùå'}")
    print(f"   –ó–≤—ñ—Ç: {'‚úÖ' if report_success else '‚ùå'}")
    
    total_success = sum([import_success, unit_success, coverage_success, report_success])
    total_tests = 4
    
    print(f"\nüéØ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_success}/{total_tests}")
    print(f"   –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É: {(total_success/total_tests)*100:.1f}%")
    
    if total_success == total_tests:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏")
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - total_success} —Ç–µ—Å—Ç—ñ–≤ –º–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏")
    
    return total_success == total_tests

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É"""
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

  python run_tests.py              # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
  python run_tests.py imports      # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
  python run_tests.py unit         # Unit —Ç–µ—Å—Ç–∏
  python run_tests.py coverage     # –¢–µ—Å—Ç–∏ –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è–º
  python run_tests.py web          # –¢–µ—Å—Ç–∏ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É
  python run_tests.py security     # –¢–µ—Å—Ç–∏ –±–µ–∑–ø–µ–∫–∏
  python run_tests.py integration  # –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏
  python run_tests.py report       # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
  python run_tests.py specific <file>  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–µ—Å—Ç

–ü—Ä–∏–∫–ª–∞–¥–∏:
  python run_tests.py specific tests/test_attack.py
  python run_tests.py coverage
  python run_tests.py report
"""
    print(help_text)

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        sys.exit(1)
