#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Å–∏–º—É–ª—è—Ü–∏–∏ –∞—Ç–∞–∫ LLM
"""

import sys
import time
from typing import Dict, Any
from utils.logger import main_logger
from utils.config_manager import config_manager
from attack.phishing_generator import PhishingGenerator
from defense.detector import ThreatDetector
from simulation.network import NetworkSimulator

class LLMAttackSimulator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∞—Ç–∞–∫ LLM"""
    
    def __init__(self):
        self.config = config_manager
        self.phishing_generator = PhishingGenerator()
        self.threat_detector = ThreatDetector()
        self.network_simulator = NetworkSimulator()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        self.simulation_stats = {
            'total_simulations': 0,
            'successful_attacks': 0,
            'detected_threats': 0,
            'average_detection_time': 0.0
        }
    
    def run_simulation(self, num_attacks: int = 5, attack_types: list = None) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞—Ç–∞–∫"""
        if attack_types is None:
            attack_types = ['phishing', 'social_engineering', 'malware']
        
        start_time = time.time()
        
        main_logger.log_simulation(
            "SIMULATION_START",
            {
                'num_attacks': num_attacks,
                'attack_types': attack_types,
                'start_time': start_time
            }
        )
        
        results = {
            'attacks': [],
            'defenses': [],
            'summary': {}
        }
        
        try:
            for i in range(num_attacks):
                attack_result = self._simulate_single_attack(i + 1, attack_types)
                results['attacks'].append(attack_result)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏
                time.sleep(0.1)
            
            # –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            results['summary'] = self._calculate_summary(results['attacks'])
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_simulation_stats(results['summary'])
            
            main_logger.log_simulation(
                "SIMULATION_COMPLETE",
                {
                    'total_attacks': num_attacks,
                    'successful_attacks': results['summary']['successful_attacks'],
                    'detected_threats': results['summary']['detected_threats'],
                    'total_time': time.time() - start_time
                }
            )
            
            return results
            
        except Exception as e:
            main_logger.log_event(
                "SIMULATION_ERROR",
                f"Error during simulation: {str(e)}",
                details={'error': str(e), 'total_time': time.time() - start_time},
                level="ERROR"
            )
            raise
    
    def _simulate_single_attack(self, attack_id: int, attack_types: list) -> Dict[str, Any]:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–π –∞—Ç–∞–∫–∏"""
        attack_type = attack_types[attack_id % len(attack_types)]
        
        main_logger.log_simulation(
            "ATTACK_START",
            {
                'attack_id': attack_id,
                'attack_type': attack_type
            }
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ç–∞–∫–∏
        if attack_type == 'phishing':
            prompt = f"Attack #{attack_id}: Reset your password immediately!"
            email_content = self.phishing_generator.generate_email(
                prompt=prompt,
                target=f"user_{attack_id}",
                urgency="high"
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã
            is_threat, confidence, patterns = self.threat_detector.is_suspicious(
                email_content, 
                content_type="phishing_email"
            )
            
            attack_result = {
                'attack_id': attack_id,
                'attack_type': attack_type,
                'content': email_content,
                'is_threat': is_threat,
                'confidence': confidence,
                'detected_patterns': patterns,
                'timestamp': time.time()
            }
        
        else:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
            attack_result = {
                'attack_id': attack_id,
                'attack_type': attack_type,
                'content': f"Simulated {attack_type} attack #{attack_id}",
                'is_threat': True,
                'confidence': 0.8,
                'detected_patterns': {},
                'timestamp': time.time()
            }
        
        main_logger.log_simulation(
            "ATTACK_COMPLETE",
            {
                'attack_id': attack_id,
                'attack_type': attack_type,
                'result': attack_result
            }
        )
        
        return attack_result
    
    def _calculate_summary(self, attacks: list) -> Dict[str, Any]:
        """–ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_attacks = len(attacks)
        successful_attacks = sum(1 for a in attacks if a['is_threat'])
        detected_threats = sum(1 for a in attacks if a['is_threat'])
        
        avg_confidence = sum(a['confidence'] for a in attacks) / total_attacks if total_attacks > 0 else 0.0
        
        return {
            'total_attacks': total_attacks,
            'successful_attacks': successful_attacks,
            'detected_threats': detected_threats,
            'detection_rate': detected_threats / total_attacks if total_attacks > 0 else 0.0,
            'average_confidence': avg_confidence
        }
    
    def _update_simulation_stats(self, summary: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.simulation_stats['total_simulations'] += 1
        self.simulation_stats['successful_attacks'] += summary['successful_attacks']
        self.simulation_stats['detected_threats'] += summary['detected_threats']
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        current_avg = self.simulation_stats['average_detection_time']
        total_sims = self.simulation_stats['total_simulations']
        self.simulation_stats['average_detection_time'] = (
            (current_avg * (total_sims - 1) + summary['detection_rate']) / total_sims
        )
    
    def get_simulation_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        return self.simulation_stats.copy()
    
    def reset_simulation_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.simulation_stats = {
            'total_simulations': 0,
            'successful_attacks': 0,
            'detected_threats': 0,
            'average_detection_time': 0.0
        }
        main_logger.log_event(
            "STATS_RESET",
            "Simulation statistics reset",
            level="INFO"
        )
    
    def print_summary(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        summary = results['summary']
        
        print("\n" + "="*50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò –ê–¢–ê–ö LLM")
        print("="*50)
        print(f"–í—Å–µ–≥–æ –∞—Ç–∞–∫: {summary['total_attacks']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∞—Ç–∞–∫: {summary['successful_attacks']}")
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É–≥—Ä–æ–∑: {summary['detected_threats']}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {summary['detection_rate']:.1%}")
        print(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {summary['average_confidence']:.2f}")
        print("="*50)
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∞—Ç–∞–∫–∞–º
        print("\n–î–ï–¢–ê–õ–ò –ê–¢–ê–ö:")
        for attack in results['attacks']:
            status = "‚ö†Ô∏è –£–ì–†–û–ó–ê" if attack['is_threat'] else "‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û"
            print(f"–ê—Ç–∞–∫–∞ #{attack['attack_id']} ({attack['attack_type']}): {status} "
                  f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {attack['confidence']:.2f})")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        main_logger.log_event(
            "APPLICATION_START",
            "LLM Attack Simulation started",
            level="INFO"
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
        simulator = LLMAttackSimulator()
        
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞—Ç–∞–∫ —á–µ—Ä–µ–∑ LLM...")
        print("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        results = simulator.run_simulation(num_attacks=5)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        simulator.print_summary(results)
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        print(f"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—Ç–∞–∫: {simulator.phishing_generator.get_generation_stats()}")
        print(f"–î–µ—Ç–µ–∫—Ç–æ—Ä —É–≥—Ä–æ–∑: {simulator.threat_detector.get_detection_stats()}")
        print(f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {simulator.get_simulation_stats()}")
        
        main_logger.log_event(
            "APPLICATION_COMPLETE",
            "LLM Attack Simulation completed successfully",
            level="INFO"
        )
        
    except Exception as e:
        main_logger.log_event(
            "APPLICATION_ERROR",
            f"Application error: {str(e)}",
            details={'error': str(e)},
            level="ERROR"
        )
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
