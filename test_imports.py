#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
"""

import sys
import os

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞...")
    print("=" * 60)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
    current_dir = os.getcwd()
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print(f"üìÅ Python path: {sys.path}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    modules_to_test = [
        'utils.config_manager',
        'utils.logger', 
        'attack.phishing_generator',
        'defense.detector',
        'simulation.network',
        'main'
    ]
    
    results = {}
    
    for module_name in modules_to_test:
        try:
            print(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É—é –∏–º–ø–æ—Ä—Ç: {module_name}")
            module = __import__(module_name)
            print(f"‚úÖ {module_name} - –£–°–ü–ï–®–ù–û")
            results[module_name] = "SUCCESS"
        except ImportError as e:
            print(f"‚ùå {module_name} - –û–®–ò–ë–ö–ê: {e}")
            results[module_name] = f"ERROR: {e}"
        except Exception as e:
            print(f"‚ö†Ô∏è  {module_name} - –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {e}")
            results[module_name] = f"WARNING: {e}"
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤...")
    print("=" * 60)
    
    try:
        from utils.config_manager import ConfigManager
        print("üì¶ –°–æ–∑–¥–∞—é ConfigManager...")
        config_manager = ConfigManager()
        print("‚úÖ ConfigManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        results['ConfigManager_instance'] = "SUCCESS"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ConfigManager: {e}")
        results['ConfigManager_instance'] = f"ERROR: {e}"
    
    try:
        from utils.logger import StructuredLogger
        print("üì¶ –°–æ–∑–¥–∞—é StructuredLogger...")
        logger = StructuredLogger("test_logger")
        print("‚úÖ StructuredLogger —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        results['StructuredLogger_instance'] = "SUCCESS"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è StructuredLogger: {e}")
        results['StructuredLogger_instance'] = f"ERROR: {e}"
    
    try:
        from attack.phishing_generator import PhishingGenerator
        print("üì¶ –°–æ–∑–¥–∞—é PhishingGenerator...")
        phishing_gen = PhishingGenerator()
        print("‚úÖ PhishingGenerator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        results['PhishingGenerator_instance'] = "SUCCESS"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PhishingGenerator: {e}")
        results['PhishingGenerator_instance'] = f"ERROR: {e}"
    
    try:
        from defense.detector import ThreatDetector
        print("üì¶ –°–æ–∑–¥–∞—é ThreatDetector...")
        detector = ThreatDetector()
        print("‚úÖ ThreatDetector —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        results['ThreatDetector_instance'] = "SUCCESS"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ThreatDetector: {e}")
        results['ThreatDetector_instance'] = f"ERROR: {e}"
    
    try:
        from simulation.network import NetworkSimulator
        print("üì¶ –°–æ–∑–¥–∞—é NetworkSimulator...")
        network_sim = NetworkSimulator()
        print("‚úÖ NetworkSimulator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        results['NetworkSimulator_instance'] = "SUCCESS"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NetworkSimulator: {e}")
        results['NetworkSimulator_instance'] = f"ERROR: {e}"
    
    try:
        from main import LLMAttackSimulator
        print("üì¶ –°–æ–∑–¥–∞—é LLMAttackSimulator...")
        simulator = LLMAttackSimulator()
        print("‚úÖ LLMAttackSimulator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        results['LLMAttackSimulator_instance'] = "SUCCESS"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LLMAttackSimulator: {e}")
        results['LLMAttackSimulator_instance'] = f"ERROR: {e}"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    success_count = sum(1 for result in results.values() if result == "SUCCESS")
    total_count = len(results)
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {total_count - success_count}/{total_count}")
    
    if success_count == total_count:
        print("\nüéâ –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–¥—É–ª—è–º–∏:")
        for module, result in results.items():
            if result != "SUCCESS":
                print(f"   - {module}: {result}")
    
    return success_count == total_count

if __name__ == "__main__":
    success = test_imports()
    sys.exit(0 if success else 1)
