#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –≤—Å—ñ—Ö –º–æ–¥—É–ª—ñ–≤ LLM Attack Analysis System
"""

import sys
import importlib
from pathlib import Path

def test_import(module_name, description=""):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—è"""
    try:
        module = importlib.import_module(module_name)
        print(f"‚úÖ {module_name} - —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        if description:
            print(f"   {description}")
        return True
    except ImportError as e:
        print(f"‚ùå {module_name} - –ø–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  {module_name} - –ø–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_utils():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É—Ç–∏–ª—ñ—Ç"""
    print("\nüîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É—Ç–∏–ª—ñ—Ç:")
    
    modules = [
        ("utils.config_manager", "–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"),
        ("utils.logger", "–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è")
    ]
    
    success_count = 0
    for module_name, description in modules:
        if test_import(module_name, description):
            success_count += 1
    
    return success_count, len(modules)

def test_attack():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –∞—Ç–∞–∫"""
    print("\nüêõ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –∞—Ç–∞–∫:")
    
    modules = [
        ("attack.llm_attack_generator", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—Ç–∞–∫ –∑ LLM")
    ]
    
    success_count = 0
    for module_name, description in modules:
        if test_import(module_name, description):
            success_count += 1
    
    return success_count, len(modules)

def test_defense():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –∑–∞—Ö–∏—Å—Ç—É"""
    print("\nüõ°Ô∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –∑–∞—Ö–∏—Å—Ç—É:")
    
    modules = [
        ("defense.defense_analyzer", "–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –∑–∞—Ö–∏—Å—Ç—É")
    ]
    
    success_count = 0
    for module_name, description in modules:
        if test_import(module_name, description):
            success_count += 1
    
    return success_count, len(modules)

def test_simulation():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó"""
    print("\nüéÆ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó:")
    
    modules = [
        ("simulation.attack_simulator", "–°–∏–º—É–ª—è—Ç–æ—Ä –∞—Ç–∞–∫")
    ]
    
    success_count = 0
    for module_name, description in modules:
        if test_import(module_name, description):
            success_count += 1
    
    return success_count, len(modules)

def test_web_app():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É"""
    print("\nüåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É:")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Flask
    try:
        import flask
        print("‚úÖ Flask - —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        flask_available = True
    except ImportError:
        print("‚ùå Flask - –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        flask_available = False
    
    if flask_available:
        modules = [
            ("web_app.app", "–í–µ–±-–¥–æ–¥–∞—Ç–æ–∫ Flask")
        ]
        
        success_count = 0
        for module_name, description in modules:
            if test_import(module_name, description):
                success_count += 1
        
        return success_count, len(modules)
    else:
        return 0, 1

def test_external_dependencies():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüì¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:")
    
    dependencies = [
        ("openai", "OpenAI API –∫–ª—ñ—î–Ω—Ç"),
        ("anthropic", "Anthropic API –∫–ª—ñ—î–Ω—Ç"),
        ("yaml", "YAML –ø–∞—Ä—Å–µ—Ä"),
        ("flask", "Flask –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫"),
        ("flask_socketio", "Flask-SocketIO"),
        ("cryptography", "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"),
        ("numpy", "NumPy –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å"),
        ("pandas", "Pandas –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö")
    ]
    
    success_count = 0
    for module_name, description in dependencies:
        if test_import(module_name, description):
            success_count += 1
    
    return success_count, len(dependencies)

def test_config_files():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("\n‚öôÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:")
    
    config_files = [
        ("config/config.yaml", "–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª"),
        ("requirements.txt", "–§–∞–π–ª –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π Python"),
        ("README.md", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É")
    ]
    
    success_count = 0
    for file_path, description in config_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path} - –∑–Ω–∞–π–¥–µ–Ω–æ")
            print(f"   {description}")
            success_count += 1
        else:
            print(f"‚ùå {file_path} - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    return success_count, len(config_files)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ LLM Attack Analysis System")
    print("=" * 60)
    
    total_success = 0
    total_modules = 0
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É—Ç–∏–ª—ñ—Ç
    success, count = test_utils()
    total_success += success
    total_modules += count
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –∞—Ç–∞–∫
    success, count = test_attack()
    total_success += success
    total_modules += count
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è –∑–∞—Ö–∏—Å—Ç—É
    success, count = test_defense()
    total_success += success
    total_modules += count
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó
    success, count = test_simulation()
    total_success += success
    total_modules += count
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É
    success, count = test_web_app()
    total_success += success
    total_modules += count
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    success, count = test_external_dependencies()
    total_success += success
    total_modules += count
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    success, count = test_config_files()
    total_success += success
    total_modules += count
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print(f"üìä –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print(f"   –£—Å–ø—ñ—à–Ω–æ: {total_success}/{total_modules}")
    print(f"   –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É: {(total_success/total_modules)*100:.1f}%")
    
    if total_success == total_modules:
        print("\nüéâ –í—Å—ñ –º–æ–¥—É–ª—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏")
    else:
        print(f"\n‚ö†Ô∏è  {total_modules - total_success} –º–æ–¥—É–ª—ñ–≤ –º–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π")
        print("–ö–æ–º–∞–Ω–¥–∞: pip install -r requirements.txt")
    
    return total_success == total_modules

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        sys.exit(1)
