#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É LLM Attack Analysis System
"""

import os
import sys
import argparse
from pathlib import Path

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –º–æ–¥—É–ª—ñ–≤
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
sys.path.insert(0, str(parent_dir))

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    required_packages = [
        'flask',
        'flask-socketio',
        'openai',
        'anthropic',
        'pyyaml',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    return True

def check_config():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    config_file = parent_dir / "config" / "config.yaml"
    
    if not config_file.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:")
        print(f"   {config_file}")
        print("\n–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–±–æ —Å–∫–æ–ø—ñ—é–π—Ç–µ –∑ –ø—Ä–∏–∫–ª–∞–¥—É")
        return False
    
    print("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–Ω–∞–π–¥–µ–Ω–æ")
    return True

def check_env_vars():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    required_vars = [
        'OPENAI_API_KEY',
        'ANTHROPIC_API_KEY',
        'SECRET_KEY'
    ]
    
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print("‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\n–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        print("–ü—Ä–∏–∫–ª–∞–¥ .env —Ñ–∞–π–ª—É:")
        print("OPENAI_API_KEY=your_openai_api_key_here")
        print("ANTHROPIC_API_KEY=your_anthropic_api_key_here")
        print("SECRET_KEY=your_secret_key_here")
        return False
    
    print("‚úÖ –í—Å—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    return True

def create_env_template():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É .env —Ñ–∞–π–ª—É"""
    env_file = parent_dir / ".env"
    
    if env_file.exists():
        print("‚ö†Ô∏è  –§–∞–π–ª .env –≤–∂–µ —ñ—Å–Ω—É—î")
        return
    
    env_template = """# LLM Attack Analysis System Environment Variables
# –°–∫–æ–ø—ñ—é–π—Ç–µ —Ü–µ–π —Ñ–∞–π–ª —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–≤–æ—ó–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏

# OpenAI API Key (–æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ https://platform.openai.com/)
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic API Key (–æ—Ç—Ä–∏–º–∞–π—Ç–µ –Ω–∞ https://console.anthropic.com/)
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –¥–ª—è Flask (–∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—è–¥–æ–∫)
SECRET_KEY=your_secret_key_here

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
# DEBUG=true
# LOG_LEVEL=INFO
"""
    
    try:
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_template)
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª—É: {env_file}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É: {e}")

def generate_secret_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    import secrets
    return secrets.token_hex(32)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(
        description="LLM Attack Analysis System - Web Application Launcher"
    )
    
    parser.add_argument(
        '--check-only',
        action='store_true',
        help='–¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é'
    )
    
    parser.add_argument(
        '--create-env',
        action='store_true',
        help='–°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª—É'
    )
    
    parser.add_argument(
        '--generate-key',
        action='store_true',
        help='–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á'
    )
    
    parser.add_argument(
        '--host',
        default='0.0.0.0',
        help='–•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 0.0.0.0)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        default=5000,
        help='–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 5000)'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è'
    )
    
    args = parser.parse_args()
    
    print("üöÄ LLM Attack Analysis System - Web Application Launcher")
    print("=" * 60)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    if args.generate_key:
        secret_key = generate_secret_key()
        print(f"\nüîë –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á:")
        print(f"SECRET_KEY={secret_key}")
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É
    if args.create_env:
        create_env_template()
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    print("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    if not check_dependencies():
        sys.exit(1)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    print("\n‚öôÔ∏è  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    if not check_config():
        sys.exit(1)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    print("\nüåç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞...")
    if not check_env_vars():
        print("\nüí° –ü–æ—Ä–∞–¥–∏:")
        print("1. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –ø–∞–ø—Ü—ñ –ø—Ä–æ–µ–∫—Ç—É")
        print("2. –î–æ–¥–∞–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ API –∫–ª—é—á—ñ")
        print("3. –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ—é: python run_web_app.py --generate-key")
        print("\n–ê–±–æ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑ --create-env –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É")
        sys.exit(1)
    
    # –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if args.check_only:
        print("\n‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–ø—É—Å–∫—É")
        return
    
    # –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É...")
    print(f"üìç –•–æ—Å—Ç: {args.host}")
    print(f"üîå –ü–æ—Ä—Ç: {args.port}")
    print(f"üêõ –†–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è: {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if args.debug else '–í–∏–º–∫–Ω–µ–Ω–æ'}")
    print("\nüåê –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä —Ç–∞ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞:")
    print(f"   http://localhost:{args.port}")
    print("\n‚èπÔ∏è  –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    print("=" * 60)
    
    try:
        # –Ü–º–ø–æ—Ä—Ç —Ç–∞ –∑–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
        from app import app, socketio
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        app.config['DEBUG'] = args.debug
        
        # –ó–∞–ø—É—Å–∫
        socketio.run(
            app,
            host=args.host,
            port=args.port,
            debug=args.debug,
            use_reloader=args.debug
        )
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –î–æ–¥–∞—Ç–æ–∫ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
